/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

asc
{
  cbuffer MaterialFlatPara : register(c0)
  {
    row_major float4x4 mvp;
    float4 ldir;
    float4 cam;
    extern void Set(const sViewport &view)
    {
      mvp = view.ModelScreen;
      cam = view.Camera.l;
      ldir.Init(-view.ModelView.i.z,-view.ModelView.j.z,-view.ModelView.k.z,0);
    }
  };
}


material MaterialFlat
{
  // the vertex shader

  vs
  {    
    asc vs_2_0                 // hlsl code
    {
      use MaterialFlatPara;

      void main
      (
        in float3 in_pos : POSITION,            // input, from vertex array
        in float3 in_norm : NORMAL,
        in float2 in_uv : TEXCOORD0,

        in float4 in_mat0 : TEXCOORD4,
        in float4 in_mat1 : TEXCOORD5,
        in float4 in_mat2 : TEXCOORD6,

        out float2 out_uv : TEXCOORD0,          // output, to pixel shader. 
        out float4 out_col : COLOR0,
        out float3 out_norm : TEXCOORD1,
        out float4 out_pos : POSITION,          // position last for DX11
      ) 
      {
        out_uv = in_uv;
        float3 pos  = float3(in_mat0°float4(in_pos ,1) , in_mat1°float4(in_pos ,1) , in_mat2°float4(in_pos ,1));
        float3 norm = float3(in_mat0°float4(in_norm,0) , in_mat1°float4(in_norm,0) , in_mat2°float4(in_norm,0));
        float l = saturate(norm ° ldir.xyz); // this is a dot product!

        out_col = float4(l,l,l,1);
        out_pos = mul(float4(pos,1),mvp);

        float3 eye = normalize(cam.xyz-pos); 
        out_norm = -reflect(eye,norm);
//        out_norm = normalize(norm);
      } 
    }
  }

  // the pixel shader

  ps
  {

    asc ps_2_0
    {
      sampler2D s0 : register(s0);

      void main
      (
        in float2 uv : TEXCOORD0,
        in float4 col : COLOR0,
        in float3 norm : TEXCOORD1,
        out float4 result : COLOR0
      )
      {
        norm = normalize(norm);
        result = tex2D(s0,uv)*col;
      }
    }
  }
};

/****************************************************************************/
