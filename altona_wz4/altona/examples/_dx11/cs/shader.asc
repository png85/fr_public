/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

level11;

asc
{
  cbuffer CSTestPara : register (c0) : slot cs 0
  {
    float4 scalebias;
    float4 uvscale;
  };
}

cs CSTest
{
  asc cs_5_0
  {
    use CSTestPara;
    RWTexture2D<float> tex0 : register(u0);

    [numthreads(8,8,1)]
    void main
    (
      uint3 tid : SV_GroupThreadID,
      uint3 gid : SV_GroupID
    )
    {
      uint ui = tid.x+8*gid.x;
      uint vi = tid.y+8*gid.y;
      float u = ui/uvscale.x;
      float v = vi/uvscale.y;

      int n = 0;
      float a = 0;
      float x = 0;
      float y = 0;

      float cx = (u*2-1)*scalebias.x+scalebias.z;
      float cy = (v*2-1)*scalebias.y+scalebias.w;

      while(a<4 && n<256)
      {
        float xt = x*x-y*y+cx;
        float yt = 2*x*y+cy;
        x = xt;
        y = yt;
        n++;
        a = x*x+y*y;
      }

      tex0[uint2(ui,vi)] = 1-n/256.0; 
    }
  }
}

/**************************************************************************+*/

asc
{
  cbuffer MaterialFlatPara : register(c0)
  {
    row_major float4x4 mvp;
    float4 ldir;
  };
}

material MaterialFlat
{
  // the vertex shader

  vs
  {    
    asc vs_5_0                 // hlsl code
    {
      use MaterialFlatPara;

      void main
      (
        in float3 in_pos : POSITION,            // input, from vertex array
        in float3 in_norm : NORMAL,
        in float2 in_uv : TEXCOORD0,
        out float2 out_uv : TEXCOORD0,          // output, to pixel shader. 
        out float4 out_col : COLOR0,
        out float4 out_pos : POSITION,          // position last for DX11
      ) 
      {
        out_uv = in_uv;
        float l = saturate(in_norm ° ldir.xyz); // this is a dot product!
        out_col = float4(l,l,l,1);
        out_pos = mul(float4(in_pos,1),mvp);
      }
    }
  }

  // the pixel shader

  ps
  {

    asc ps_5_0
    {
      SamplerState sam0 : register(s0);
      Texture2D tex0 : register(t0);
      Buffer<float4> lut : register(t1);
      void main
      (
        in float2 uv : TEXCOORD0,
        in float4 col : COLOR0,
        out float4 result : COLOR0
      )
      {
        float v = tex0.Sample(sam0,uv).x;
        result = col * lut[v*255];
      }
    }
  }
};
