/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

level11;

asc
{
  cbuffer CSTestPara : register (c0) : slot cs 0
  {
    float4 tx;
    float4 ty;
    float4 ofs;
    float4 potpos[4];
  };
}

cs CSTest
{
  asc cs_5_0
  {
    static const uint DIM = 8;
    static const uint DIM1 = DIM+1;
    static const uint DIM2 = DIM+2;
    static const uint DIM3 = DIM+3;
  
    use CSTestPara;
    
    RWByteAddressBuffer vb : register(u0);
    RWByteAddressBuffer ib : register(u1);
    RWStructuredBuffer<uint> vc : register(u2);
    RWStructuredBuffer<uint> ic : register(u3);
    
    Buffer<uint> mcmap : register(t0);
    
    groupshared float4 pot[DIM3*DIM3*DIM3];
    groupshared int index[3*DIM1*DIM1*DIM1];
    

    [numthreads(DIM3,DIM3,1)]
    void main
    (
      uint3 tid : SV_GroupThreadID,
      uint3 gid : SV_GroupID
    )
    {
      
      // calc isovalues
      uint tidz;
      
      for(tidz=0;tidz<DIM3;tidz++)
      {
        tid.z = tidz;
        uint th = tid.z*DIM3*DIM3 + tid.y*DIM3 + tid.x;
        
        float3 p = (float3(tid+gid*DIM-1)+ofs.xyz)*ofs.w;
        
        float pot_= potpos[0].w/length(p-potpos[0].xyz)
                  + potpos[1].w/length(p-potpos[1].xyz)
                  + potpos[2].w/length(p-potpos[2].xyz)
                  + potpos[3].w/length(p-potpos[3].xyz);
        
                  
        pot[th] = float4(1,1,1,(pot_-0.6)*8);
      }
      
      GroupMemoryBarrierWithGroupSync();

      // calc normals
                
      for(tidz=0;tidz<DIM2;tidz++)
      {
        tid.z = tidz;
        if(tid.x<DIM2 && tid.y<DIM2)
        {
          uint th = (tid.z+1)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+1);
          float3 n;
          
          n.x = pot[(tid.z+1)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+2)].w - pot[(tid.z+1)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+0)].w;
          n.y = pot[(tid.z+1)*DIM3*DIM3 + (tid.y+2)*DIM3 + (tid.x+1)].w - pot[(tid.z+1)*DIM3*DIM3 + (tid.y+0)*DIM3 + (tid.x+1)].w;
          n.z = pot[(tid.z+2)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+1)].w - pot[(tid.z+0)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+1)].w;
          
          pot[th].xyz = -normalize(n);
        }
      }

      GroupMemoryBarrierWithGroupSync();
      
      // emit vertices
      
      for(tidz=0;tidz<DIM1;tidz++)
      {
        tid.z = tidz;
        if(tid.x<DIM1 && tid.y<DIM1)
        {
          float4 px,py,pz,p0;
          p0 = pot[(tid.z+1)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+1)];
          px = pot[(tid.z+1)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+2)];
          py = pot[(tid.z+1)*DIM3*DIM3 + (tid.y+2)*DIM3 + (tid.x+1)];
          pz = pot[(tid.z+2)*DIM3*DIM3 + (tid.y+1)*DIM3 + (tid.x+1)];
          bool4 b = float4(px.w,py.w,pz.w,p0.w)>0;

          uint indexth = tid.z*DIM1*DIM1 + tid.y*DIM1 + tid.x;
          float3 pos0 = (float3(tid+gid*DIM+1)+ofs.xyz)*ofs.w;
          uint n;

          n = 0;
          if(b.w!=b.x)
          {
            float f = p0.w/(p0.w-px.w);
            float3 norm = p0.xyz*f + px.xyz*(1-f);
            float3 pos = pos0+float3(f*ofs.w,0,0);

            n = vc.IncrementCounter();
            uint vp = n*1*32;

            vb.Store4(vp+0*32+ 0,asuint(float4(pos.xyz,norm.x)));
            vb.Store4(vp+0*32+16,asuint(float4(norm.yz,pos.xy)));
          }
          index[indexth+0*DIM1*DIM1*DIM1] = n;

          n = 0;
          if(b.w!=b.y)
          {
            float f = p0.w/(p0.w-py.w);
            float3 norm = p0.xyz*f + py.xyz*(1-f);
            float3 pos = pos0+float3(0,f*ofs.w,0);

            n = vc.IncrementCounter();
            uint vp = n*1*32;

            vb.Store4(vp+0*32+ 0,asuint(float4(pos.xyz,norm.x)));
            vb.Store4(vp+0*32+16,asuint(float4(norm.yz,pos.xy)));
          }
          index[indexth+1*DIM1*DIM1*DIM1] = n;

          n = 0;
          if(b.w!=b.z)
          {
            float f = p0.w/(p0.w-pz.w);
            float3 norm = p0.xyz*f + pz.xyz*(1-f);
            float3 pos = pos0+float3(0,0,f*ofs.w);

            n = vc.IncrementCounter();
            uint vp = n*1*32;

            vb.Store4(vp+0*32+ 0,asuint(float4(pos.xyz,norm.x)));
            vb.Store4(vp+0*32+16,asuint(float4(norm.yz,pos.xy)));
          }
          index[indexth+2*DIM1*DIM1*DIM1] = n;
        }
      }
      GroupMemoryBarrierWithGroupSync();

      // emit indices
          
      for(tidz=0;tidz<DIM;tidz++)
      {
        tid.z = tidz;
        if(tid.x<DIM && tid.y<DIM)
        {
          uint th = (tid.z)*DIM3*DIM3 + (tid.y)*DIM3 + (tid.x);
          uint indexth = tid.z*DIM1*DIM1 + tid.y*DIM1 + tid.x;

          float4 h0,h1;
          uint code = 0;

          if(pot[th+1*DIM3*DIM3+1*DIM3+1].w>0) code = code | 0x010;
          if(pot[th+1*DIM3*DIM3+1*DIM3+2].w>0) code = code | 0x020;
          if(pot[th+1*DIM3*DIM3+2*DIM3+2].w>0) code = code | 0x040;
          if(pot[th+1*DIM3*DIM3+2*DIM3+1].w>0) code = code | 0x080;
          if(pot[th+2*DIM3*DIM3+1*DIM3+1].w>0) code = code | 0x100;
          if(pot[th+2*DIM3*DIM3+1*DIM3+2].w>0) code = code | 0x200;
          if(pot[th+2*DIM3*DIM3+2*DIM3+2].w>0) code = code | 0x400;
          if(pot[th+2*DIM3*DIM3+2*DIM3+1].w>0) code = code | 0x800;
          
          for(int i=0;i<15;i+=3)
          {
            if(mcmap[code+i+0]!=0xffffffff)
            {
              uint n = ic.IncrementCounter();
              uint3 ind;
              ind.x = index[indexth+mcmap[code+i+0]];
              ind.y = index[indexth+mcmap[code+i+1]];
              ind.z = index[indexth+mcmap[code+i+2]];
              ib.Store3(n*3*4,ind);
            }
          }
        }
      }
    }
  }
}

cs WriteCount
{
  asc cs_5_0
  {
    RWStructuredBuffer<uint> cnt : register(u0);
    RWBuffer<uint> ind : register(u1);
    [numthreads(1,1,1)]
    void main()
    {
      ind[0] = cnt.IncrementCounter()*3;
      ind[1] = 1;
      ind[2] = 0;
      ind[3] = 0;
      ind[4] = 0;
    }
  }
}

/**************************************************************************+*/

asc
{
  cbuffer MaterialFlatPara : register(c0)
  {
    row_major float4x4 mvp;
    float4 ldir;
  };
}

material MaterialFlat
{
  // the vertex shader

  vs
  {    
    asc vs_5_0                 // hlsl code
    {
      use MaterialFlatPara;

      void main
      (
        in float3 in_pos : POSITION,            // input, from vertex array
        in float3 in_norm : NORMAL,
        in float2 in_uv : TEXCOORD0,
        out float2 out_uv : TEXCOORD0,          // output, to pixel shader. 
        out float4 out_col : COLOR,
        out float4 out_pos : POSITION,          // position last for DX11
      ) 
      {
        out_uv = in_uv;
        float l = saturate(in_norm ° ldir.xyz); // this is a dot product!
        out_col = float4(l,l,l,1);
        out_pos = mul(float4(in_pos,1),mvp);
      }
    }
  }

  // the pixel shader

  ps
  {

    asc ps_5_0
    {
      SamplerState sam0 : register(s0);
      Texture2D tex0 : register(t0);
      void main
      (
        in float2 uv : TEXCOORD0,
        in float4 col : COLOR0,
        out float4 result : COLOR0
      )
      {
        result = tex0.Sample(sam0,uv)*col;
      }
    }
  }
};
