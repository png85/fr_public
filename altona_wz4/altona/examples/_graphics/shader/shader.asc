/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

/****************************************************************************/
/***                                                                      ***/
/***   (C) 2005 Dierk Ohlerich, all rights reserved                       ***/
/***                                                                      ***/
/****************************************************************************/
/***                                                                      ***/
/***   example to use "altona shader compiler" ASC                        ***/
/***                                                                      ***/
/***   this file contains a vertex and a pixel shader.                    ***/
/***   both are compiled with the microsoft shader compiler, and the      ***/
/***   resulting bytecode is packed into a nice class ready for use       ***/
/***   with altona.                                                       ***/
/***                                                                      ***/
/***   shader.cpp and shader.hpp are the output of ASC.                   ***/
/***                                                                      ***/
/****************************************************************************/

asc
{
  cbuffer MaterialFlatPara : register(c0)
  {
    row_major float4x4 mvp;
    float4 ldir;
  };
}


material MaterialFlat
{
  // the vertex shader

  vs
  {    
    asc vs_2_0                 // hlsl code
    {
      use MaterialFlatPara;

      void main
      (
        in float3 in_pos : POSITION,            // input, from vertex array
        in float3 in_norm : NORMAL,
        in float2 in_uv : TEXCOORD0,
        out float2 out_uv : TEXCOORD0,          // output, to pixel shader. 
        out float4 out_col : COLOR0,
        out float4 out_pos : POSITION,          // position last for DX11
      ) 
      {
        out_uv = in_uv;
        float l = saturate(in_norm ° ldir.xyz); // this is a dot product!
        out_col = float4(l,l,l,1);
        out_pos = mul(float4(in_pos,1),mvp);
      }
    }
  }

  // the pixel shader

  ps
  {

    asc ps_2_0
    {
      sampler2D s0 : register(s0);

      void main
      (
        in float2 uv : TEXCOORD0,
        in float4 col : COLOR0,
        out float4 result : COLOR0
      )
      {
        result = tex2D(s0,uv)*col;
      }
    }
  }
};

/****************************************************************************/

// you may define multiple shaders in one file...

/****************************************************************************/
