/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

header
{
#include "wz4lib/basic_ops.hpp"
}

code
{
  #include "wz4frlib/adf.hpp"
  #include "wz4frlib/adf_ops.hpp"
  #include "wz4frlib/pdf_ops.hpp"
  #include "wz4frlib/pdf.hpp"  
  #include "fr063_tron_ops.hpp"
  #include "fr063_tron.hpp"
  #include "wz4_demo2_ops.hpp"  
}


operator Wz4Render FR063_SpritesADF(Wz4Particles,Wz4ADF,Texture2D)
{
  column = 2;
  parameter
  {
    anim float31 Trans(-4096..4096 step 0.01);
    anim float Size(0..4096 step 0.01) = 0.125;
    anim float Aspect(-16..16 step 0.01) = 0;
    layout flags Mode ("*0add|premul alpha|mul|mul2|smooth|alpha (please use pm-alpha):*4zoff|zread|zwrite|zon:*8-|sort:*9atlas anim|atlas multi");
    continue layout flags Mode ("*11fade in out|-:*14-|scale by transform");
    continue layout flags Mode ("*16dest alpha from shader|dest alpha unchanged|dest alpha = 0|dest alpha blend");
    padding(1);
    
    group "Randomization";
    anim float RotStart(-1024..1024 step 0.01) = 0;
    anim float RotSpeed(-1024..1024 step 0.01) = 0;
    anim float RotRand(-1024..1024 step 0.01) = 0;
    anim float RotSpread(0..1024 step 0.01) = 0;
    float SizeRand(0..10 step 0.01);
    
    group "Particle Size";
    flags GrowMode("const|linear|sine|smoothstep");
    anim float FadeIn(0..1 step 0.01) = 0;
    anim float FadeOut(0..1 step 0.01) = 0;
    int Renderpass(-127..127);
	
    if(!(Mode & 0x200))
    {
	    group "Texture Animation";
	    anim float TexAnimSpeed(-1024..1024 step 0.01) = 1;
	    anim float TexAnimRand(0..1 step 0.01) = 0;
    }

    group "Multiple";
    int GroupCount(1..256) = 1;

    if(!(Mode & 0x800))
    {
      group "Distance fading";
      float NearFadeDistance(0..0x100000 step 0.125) = 1;
      float FarFadeDistance (0..0x100000 step 0.125) = 1000;
      float FarFadeRange    (0..0x100000 step 0.125) = 100;
    }
    
    group "SDF Para";
    anim float SDFFadeOffset (-256..256 step 0.0001) = 0.0;
    anim float SDFFadeMult (-256..256 step 0.0001) = 1.0;
    
    group "Light"; 
    anim float31 LightPos(-32767..32767 step 0.001) = {0,0,0};    
    anim float   DiffusePower(0..1000000 step 0.001) =  1.0;
    anim float   SpecHardness(0..1000000 step 0.001) =  1.0;    
    anim float   SpecPower(0..1000000 step 0.001)    =  1.0;    
    anim color   InAmbientColor("rgba")           = 0xff001f00;        
    anim color   InDiffuseColor("rgba")           = 0xff1f0000;          
    anim color   InSpecColor("rgba")              = 0xffffffff;                   
    anim color   OutAmbientColor("rgba")          = 0xff00001f;        
    anim color   OutDiffuseColor("rgba")          = 0xff1f0000;          
    anim color   OutSpecColor("rgba")             = 0xffffffff;        

    layout flags DropMode ("none|out|in");    
    layout flags CollMode ("none|wrapping");  
    anim float WrapOffset (-32..32 step 0.0001) = 0.0;  
    
    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNFR063_Sprites *node = new RNFR063_Sprites();
    node->ParaBase = node->Para = *para;
    node->Source = in0->RootNode; node->Source->AddRef();
    node->SDF         = in1; in1->AddRef();
    node->TextureDiff = in2; in2->AddRef();
    node->Init();

    out->RootNode = node;
    out->AddCode(cmd,para->Renderpass);
    
    if (cmd->Op)
    {
      cmd->Op->RefObj->Release();
      cmd->Op->RefObj = out; out->AddRef();    
    }    
  }
  handles  
  {    
    pi.Handle3D(op,1,para->LightPos,wHM_PLANE);
  }   
}


operator Wz4Render FR063_ClothGridSimRender(Wz4ADF, Wz4Mtrl)
{
  column = 1;

  parameter
  {
    group "Grid Creation";    
    float31 Pos(-1024..1024 step 0.001) = {-0.75,1,-0.75};
    float30 AX(-1024..1024 step 0.001) = {0.1,0,0};
    float30 AY(-1024..1024 step 0.001) = {0,0,0.1};
    int XC(0..1024 step 1) = 15;
    int YC(0..1024 step 1) = 15;    
    float C1(-16384..16384 step 0.001) = 0.5;
    float C2(-16384..16384 step 0.001) = 0.5;
    float Mass(0..1 step 0.001) =  1.0;

    group "Simulation Parameter";  
    float30 Gravity(-1024..1024 step 0.001) = { 0,-1.0,0 }; 
    anim float30 Force(-1024..1024 step 0.001) = { 0,0,0 }; 
    float Damping(0..1024 step 0.001) =  0.2;
    float CollisionGuard(0..10 step 0.001) =  0.3;
    float SlideFactor(0..4 step 0.001) = 0.0;
    float TimeScale(0.1..1024 step 0.001) =  1.0;
    float TimeOffset(0..1024 step 0.1) =  0.0;   

    group "Render Parameter";    
    int LightEnv(0..15)=0;
    int Renderpass(-127..127);
    layout flags DebugDoSim("Off|On")=1;  
    layout flags DebugUseMulticore("Off|On")=1;  
    layout flags DebugSubdivide("Off|On")=0;  
    layout flags DebugFlipEdges("Off|On")=0;  
    
    array
    {
      int GridX(0..1024) = 0;
      int GridY(0..1024) = 0;            
      layout flags Type("Fixing-Total|Fixing-AfterInit|Release-AfterInit")=1;
      float DragRadius(0..256 step 0.0001) =  0.0;      
      char[32] SplineName="";      
    }
    
    group "Animation Script"; overbox overlabel lines 5 string Script;       
  }

  code
  {
    RNFR063ClothGridSimRender *node = new RNFR063ClothGridSimRender();
    node->ParaBase = node->Para = *para;
    
    //node->DF = in0;  in0->AddRef();
    node->Mtrl = in1;  in1->AddRef();
    node->Array.Resize(cmd->ArrayCount);
    Wz4RenderArrayFR063_ClothGridSimRender *array= (Wz4RenderArrayFR063_ClothGridSimRender *)cmd->Array;
    for(sInt i=0;i<cmd->ArrayCount;i++)
    {
      node->Array[i].Para = array[i];      
    }
    node->Init(in0),in0->AddRef();
    out->RootNode = node;
    out->AddCode(cmd,para->Renderpass);
    
    if (cmd->Op)
    {
      cmd->Op->RefObj->Release();
      cmd->Op->RefObj = out; out->AddRef();    
    }
  }
  handles  
  {
    RNFR063ClothGridSimRender::Handles(pi,para,op);    
  } 
}



operator Wz4Render FR063_MassBallColl(Wz4ADF)
{
  column = 2;
  parameter
  {   
    group "Generation";
    int     NbOfBalls(1..32767) = 256;
    int     Seed(0..255) = 1;
    float31 PosStart(-1024..1024 step 0.001) = { 0,0,0 };
    float30 PosRand(0..1024 step 0.001) = { 0,0,0 };    
    float   RadiusStart(0..8 step 0.001) = 0.25;
    float   RadiusRand(0..8 step 0.001) =  0.25;
    float   MassStart(-16..16 step 0.001) = 1.0;
    float   MassScale(-16..16 step 0.001) = 1.0;
     
    group "Simulation";
    float30 Gravity(-1024..1024 step 0.001) = { 0,-1.0,0 };     
    float TimeScale(0..1024 step 0.001) =  1.0;
    float TimeOffset(0..1024 step 0.1) =  0.0;   
    float SimStep(0.0001..0.2 step 0.0001) =  0.01; 
    float ReactPower(0.0001..2.0 step 0.0001) =  0.01;
    float ReflPower(0.0001..2.0 step 0.0001) =  0.01;
    float SlidePower(0.0001..2.0 step 0.0001) =  0.01;
           
    group "Light"; 
    anim float31 LightPos(-1024..1024 step 0.001) = {0,0,0};    
    anim color   AmbientColor("rgba")             = 0xff001f00;        
    anim float   AmbientPower(0..1024 step 0.001) = 1.0;    
    anim color   DiffuseColor("rgba")             = 0xff1f0000;          
    anim float   DiffusePower(0..1024 step 0.001) = 1.0;
    anim color   SpecColor("rgba")                = 0xffffffff;
    anim float   SpecPower(0..1024 step 0.001)    = 1.0;            
    anim float   SpecHardness(0..1024 step 0.001) = 1.0;    
        
    group "Render"; 
    int Renderpass(-127..127) = 0;
    
    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    RNFR063_MassBallColl *node = new RNFR063_MassBallColl();
    node->ParaBase = node->Para = *para;    
    node->SDF      = in0; in0->AddRef();
    node->Init();
    out->RootNode = node;
    out->AddCode(cmd,para->Renderpass);
  }
}

operator SphCollision SphSDFColl(Wz4ADF)
{
  tab = SphGenerator;
  column = 2;
  new = SphCollSDF;

  parameter
  {
    flags Flags("*0contain|kill:*4-|invert");    
  }

  code
  {
    out->Para = *para;
    out->SDF = in0; in0->AddRef();
  }
}

operator SphCollision SphSDFMorph(Wz4ADF)
{
  tab = SphGenerator;
  column = 2;
  new = SphMorphSDF;

  parameter
  {
    float Factor(-16..16 step 0.0001) = 0.001;
    float Time(0..65536 step 0.0001) = 0.001;
  }

  code
  {
    out->Para = *para;
    out->SDF = in0; in0->AddRef();
  }
}


operator SphCollision SphPDFColl(Wz4PDF)
{
  tab = SphGenerator;
  column = 2;
  new = SphCollPDF;

  parameter
  {
    flags Flags("*0contain|kill:*4-|invert");    
  }

  code
  {
    out->Para = *para;
    out->PDF = in0; in0->AddRef();
  }
}

operator Wz4Render FR063_SpritesExt(Texture2D,?Texture2D)
{
  column = 2;
  parameter
  {
    anim float Aspect(-16..16 step 0.01) = 0;
    layout flags Mode ("*0add|premul alpha|mul|mul2|smooth|alpha (please use pm-alpha):*4zoff|zread|zwrite|zon:*9atlas anim|atlas multi:*14-|scale by transform:*16old behaviour|-");
    padding(1);
            
    int Renderpass(-127..127);
	
    if(!(Mode & 0x200))
    {
	    group "Texture Animation";
	    anim float TexAnimSpeed(-1024..1024 step 0.01) = 1;
	    anim float TexAnimRand(0..1 step 0.01) = 0;
    }

    group "NearFarDistanceFade";
    float NearFadeDistance(0..0x100000 step 0.125) = 1;
    float FarFadeDistance (0..0x100000 step 0.125) = 1000;
    float FarFadeRange    (0..0x100000 step 0.125) = 100;
           
    array
    {
      anim float31 Pos(-1024..1024 step 0.001) = { 0.0,0.0,0.0 }; 
      anim color Color("rgba") = 0xffffffff;
      float Size (0..1024 step 0.0001) = { 0.0 };
      float30 AlignDir(-16..16 step 0.001) = { 0.0,0.0,0.0 };
      float   FixAngle(0..1 step 0.0001) = { 0.0 }; 
      float   Range(0..1 step 0.0001) = { 0.0 }; 
      flags Mode("*16AngleFade Off|AngleOn")=0;
      continue flags Mode("*0Lock Off|Lock On");
    }
      
    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
    FR063_SpritesExt *node = new FR063_SpritesExt();
    node->ParaBase = node->Para = *para;    
    node->TextureDiff = in0; in0->AddRef();
    if (in1)
    {
      node->TextureFade = in1; 
      in1->AddRef();
    }

    node->Particles.Resize(cmd->ArrayCount);
    Wz4RenderArrayFR063_SpritesExt *array= (Wz4RenderArrayFR063_SpritesExt *)cmd->Array;
    for(sInt i=0;i<cmd->ArrayCount;i++)
    {
      sClear(node->Particles[i]);
      node->Particles[i].Para = array[i];      
    }

    node->Init();
    out->RootNode = node;
    out->AddCode(cmd,para->Renderpass);    
    if (cmd->Op)
    {
      cmd->Op->RefObj->Release();
      cmd->Op->RefObj = out; out->AddRef();    
    }    
  }
  handles    
  {
    FR063_SpritesExt::Handles(pi,para,op);    
  }
  
}



operator Wz4Render FR063_AermelKanal(Wz4Mtrl,?Wz4Render, ?Wz4ADF)  //Wz4ADF,Wz4Mtrl,Wz4Mesh)
{
  column = 1;
  parameter
  {
    group "Kanal";            
    int Slices(3..256) = 32;  
    int Segments(2..4096) = 256;     
    string PathSpline:1;        
    float RadiusOffset[2](0..4096 step 0.001) = { 1.0,1.0 };
    float RadiusScale[2](0..4096 step 0.001) = { 1.0,1.0 };
    float RotationOffset(-8..8 step 0.01) = 0.0;

    group "Movement"; 
    int Range(1..256) = 4;    
    string MovementSpline:2;           
  
    group "Render Parameter";
    int LightEnv(0..15)=0;
    int Renderpass(-127..127);
                    
    group "Debug"; 
    layout flags DebugMode ("*0-|Edit Spline")=0;
                        
    group "Animation Script"; overbox overlabel linenumber lines 5 string Script;
  }
  code
  {
  
    RNFR063AermelKanal *node = new RNFR063AermelKanal();
    node->ParaBase = node->Para = *para;    
    if (in2)
    {
      node->DF   = in2; in2->AddRef();
    }
    node->Mtrl = in0; in0->AddRef();           
    node->PathName = cmd->Strings[1] && cmd->Strings[1][0] ? cmd->Strings[1] : L"ak_path_spline";    
    node->MovementName = cmd->Strings[2] && cmd->Strings[2][0] ? cmd->Strings[2] : L"ak_movement_spline";    
    node->Init();
    out->RootNode = node;
    out->AddChilds(cmd,para->Renderpass,1,2);
    if (cmd->Op)
    {
      cmd->Op->RefObj->Release();
      cmd->Op->RefObj = out; out->AddRef();    
    }    
  }
  handles  
  {    
//    pi.Handle3D(op,1,para->LightPos,wHM_PLANE);
  }   
}
