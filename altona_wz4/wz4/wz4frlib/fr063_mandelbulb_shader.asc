/*+**************************************************************************/
/***                                                                      ***/
/***   This file is distributed under a BSD license.                      ***/
/***   See LICENSE.txt for details.                                       ***/
/***                                                                      ***/
/**************************************************************************+*/

/*+**************************************************************************/
/***                                                                      ***/
/***   Copyright (C) by Dierk Ohlerich                                    ***/
/***   all rights reserved                                                ***/
/***                                                                      ***/
/***   To license this software, please contact the copyright holder.     ***/
/***                                                                      ***/
/**************************************************************************+*/

/****************************************************************************/
/***                                                                      ***/
/***   (C) 2005 Dierk Ohlerich, all rights reserved                       ***/
/***                                                                      ***/
/****************************************************************************/
/***                                                                      ***/
/***   example to use "altona shader compiler" ASC                        ***/
/***                                                                      ***/
/***   this file contains a vertex and a pixel shader.                    ***/
/***   both are compiled with the microsoft shader compiler, and the      ***/
/***   resulting bytecode is packed into a nice class ready for use       ***/
/***   with altona.                                                       ***/
/***                                                                      ***/
/***   shader.cpp and shader.hpp are the output of ASC.                   ***/
/***                                                                      ***/
/****************************************************************************/
/*
asc
{
  cbuffer MaterialMandelPara : register(c0)
  {
    row_major float4x4 mvp;
    float4 ldir;
    float4 Color;
    float4 FogColor;
    float4 Cam;
  };
}


material MaterialMandel
{
  // the vertex shader

  vs
  {    
    asc vs_2_0                 // hlsl code
    {
      use MaterialMandelPara;

      void main
      (
        in float3 in_pos : POSITION,            // input, from vertex array
        in uint4 in_norm : NORMAL,
        out float4 out_col : COLOR0,
        out float4 out_pos : POSITION,          // position last for DX11
      ) 
      {
        float fog = saturate((log2(length(Cam.xyz - in_pos.xyz)+1))*Cam.w);

        float3 norm = normalize(in_norm.xyz/127.0-1);
        float l = saturate(norm ° ldir.xyz)*0.75+0.25; // this is a dot product!
        out_col = lerp(float4(l,l,l,1)*Color,FogColor,fog);
        out_pos = mul(float4(in_pos,1),mvp);
      }
    }
  }

  // the pixel shader

  ps
  {

    asc ps_2_0
    {
      sampler2D s0 : register(s0);

      void main
      (
        in float4 col : COLOR0,
        out float4 result : COLOR0
      )
      {
        result = col;
      }
    }
  }
};
*/
/****************************************************************************/

asc
{
  cbuffer MandelMathVP : register(c0) : slot vs 0
  {
    row_major float4x4 mvp;
  };
  cbuffer MandelMathPP : register(c0) : slot ps 0
  {
    float4 para;
  };
}

material MandelMath
{
  vs
  {    
    asc vs_3_0                 // hlsl code
    {
      use MandelMathVP;

      void main
      (
        in float3 in_pos : POSITION,            // input, from vertex array
        in float4 in_uv0 : TEXCOORD0,
        in float2 in_uv1 : TEXCOORD1,
        out float4 out_uv0 : TEXCOORD0,          // output, to pixel shader. 
        out float2 out_uv1 : TEXCOORD1,          // output, to pixel shader. 
        out float4 out_pos : POSITION,          // position last for DX11
      ) 
      {
        out_uv0 = in_uv0;
        out_uv1.xy = in_uv1;
      //  out_uv1.z = in_pos.z;
        out_pos = mul(float4(in_pos.x,in_pos.y,0.5,1),mvp);
      }
    }
  }

  ps
  {
    asc ps_3_0
    {
      use MandelMathPP;

      sampler2D s0 : register(s0);
      sampler2D s1 : register(s1);
      sampler2D s2 : register(s2);

      void main
      (
        in float4 uv0 : TEXCOORD0,          // cube spec
        in float2 uv1 : TEXCOORD1,          // for textures
        in float4 pos : VPOS,               // position last for DX11
        out float4 result : COLOR0,            // input, from vertex array
      ) 
      {
        const int n = 32;
        const int m = n+3;
        const int no = 1;
        const float s = 1.5;

        float4 tx = round(tex2D(s0,uv1.xy)*255.0)-no;
        float4 ty = round(tex2D(s1,uv1.xy)*255.0)-no;
        float4 tz = round(tex2D(s2,uv1.xy)*255.0)-no;

        float4 cx = (uv0.x + uv0.w * tx.bgra) * s;
        float4 cy = (uv0.y + uv0.w * ty.bgra) * s;
        float4 cz = (uv0.z + uv0.w * tz.bgra) * s;
        

        float4 x = cx;
        float4 y = cy;
        float4 z = cz;



        // ===

        const int max = int(para.x);
        int i = 0;
        float4 ab = 0;
        float4 ib = 0;
        while(i<max)
        {

          float4 r2 = x*x+y*y;
          float4 r4 = r2*r2;
          float4 r6 = r2*r4;
          float4 r8 = r4*r4;

          float4 x2 = x*x;
          float4 x4 = x2*x2;
          float4 x6 = x2*x4;
          float4 x8 = x4*x4;

          float4 y2 = y*y;
          float4 y4 = y2*y2;
          float4 y6 = y2*y4;
          float4 y8 = y4*y4;

          float4 z2 = z*z;
          float4 z4 = z2*z2;
          float4 z6 = z2*z4;
          float4 z8 = z4*z4;

          float4 a = 1 + (z8 - 28*z6*r2 + 70*z4*r4 - 28*z2*r6) / (r8);

          float4 xx = a * (x8 - 28*x6*y2 + 70*x4*y4 - 28*x2*y6 + y8);
          float4 yy = (8*a*x*y) * (x6 - 7*x4*y2 + 7*x2*y4 - y6);
          float4 zz = (8*z*sqrt(r2)) * (z2-r2) * (z4 - 6*z2*r2 + r4);

          x = cx+xx;
          y = cy+yy;
          z = cz+zz;

          float4 run = ab<2;
          
          ab = lerp(ab,x*x+y*y+z*z,run);
          ib = lerp(ib,ib+1,run);
          i++;
        }

        // ===

        result = ((ib+(2/ab)-(max-para.y)));

//        result.bgra = result / 16 + 0.5; // 8 bit rendertarget
      }
    }
  }
};
